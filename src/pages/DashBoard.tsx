"use client";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import LineChart_ from "../components/LineChart";
import Select_ from "../components/Select";
import useDebouncs from "../hooks/useDebouncs";
import { api } from "../utils/api";

// const setChart = (marketData: any) => {
//   const keys = Object.keys(marketData[0]);
const timeGaps = ["1m", "5m", "15m", "30m", "1h"];
const headers = [
  "ת.יצירה",
  "מזהה",
  "ת.פעולה",
  "ערך ראשוני",
  "ערך קניה",
  "רווח/הפסד",
  "ס.פעיל",
  "מזהה מטבע",
  "מזהה מ",
  "פעולה",
  "זמן סיום",
  "ערך מכירה",
  "עמלה",
];
const dateHeaders = ["ת.יצירה", "ת.פעולה", "זמן סיום"];

const getUserStrat = (
  userId: string,
  strats: any,
  setTimeGap: React.Dispatch<React.SetStateAction<string>>
) => {
  const s = strats.filter((s: any) => s.userID == userId)[0];
  console.log(s, userId, strats);
  setTimeGap(s.baseTimeGap);
  return s;
};

function DashBoard() {
  const [addedPlots, setAddedPlots] = useState();
  const [ticksAmount, setTickAmount] = useState(200);
  const [basePlot, setBasePlot] = useState([]);
  const [CoinsList, SetCoinsList] = useState<string[]>(["all"]);
  const [timeGap, setTimeGap] = useState<string>("1m");
  const [usersNames, setUsersNames] = useState<string[]>(["all"]);
  const [currentStrat, setCurrentStrat] = useState<any>();
  const ticks = useDebouncs(ticksAmount, 2000);

  useEffect(() => {
    if (ticks) {
      setTickAmount(ticks);

      console.log({ ticks, ticksAmount });
    }
  }, [ticks]);

  const Actions = api.example.getActions.useQuery({
    key: "all",
    url_extention: "actions",
  });

  const Movments = api.example.getActions.useQuery({
    key: "all",
    url_extention: "movments",
  });
  const Coins = api.example.getActions.useQuery({
    key: "",
    url_extention: "coins",
  });
  const reformat = Intl.DateTimeFormat("en-US", {
    day: "2-digit",
    month: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
  });

  const UsersData = api.example.getUsersData.useQuery({ key: "" });

  Coins.data?.data &&
    CoinsList.length === 1 &&
    SetCoinsList((prev) => [
      ...prev,
      ...Coins.data.data.map((r: any) => r.coin_id),
    ]);
  UsersData?.data?.data.users &&
    usersNames.length === 1 &&
    setUsersNames((prev) => [
      ...prev,
      ...UsersData.data.data.users.map((U: any) => U.name),
    ]);

  // bank: 2224.22;
  // baseTimeGap: "5m";
  // current_opend: 0;
  // entryTimeOut: 3;
  // exitTimeOut: 3;
  // id: "465sdfhgdfgudtu";
  // isActive: true;
  // longEmaRatio: 20;
  // max_open_trades: 2;
  // name: "איציק";
  // schema: "{schema_name:on_cross_again,ticks_on_enter:3,ticks_on_exit:2}";
  // shortEmaRatio: 5;
  // stake_amount: 0.2;
  // timeout_count: 5;
  // tradable_balance_ratio: 0.75;
  // userID: "sdfhgdfgudtu";

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        dir="rtl"
        className="min-w-screen flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]"
      >
        <div className="container flex items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            DashBoard<span className="text-[hsl(280,100%,70%)]"></span>
          </h1>
          <div className="flex gap-2">
            <div className="flex w-1/2 flex-col">
              <Select_
                default={CoinsList[0]}
                values={CoinsList}
                handleChange={(e: any) =>
                  setBasePlot(
                    Movments.data?.data.filter(
                      (move: any) => move.coin_id == e.target.value
                    )
                  )
                }
              />
              <Select_
                default={""}
                value={timeGap}
                values={timeGaps}
                handleChange={(e: any) => {
                  setTimeGap(e.target.value);
                }}
              />

              <Select_
                default={usersNames[0]}
                values={usersNames}
                handleChange={(e: any) => {
                  if (UsersData.data?.data) {
                    console.log("strats ", UsersData.data.data.strats);
                    const st = getUserStrat(
                      UsersData.data.data.users.filter(
                        (u: any) => u.name == e.target.value
                      )[0].id,
                      UsersData.data.data.strats,
                      setTimeGap
                    );
                    setCurrentStrat({ ...st });
                  }
                }}
              />
            </div>
            <div className="w-1/2">
              <input
                className="flex text-center font-bold text-black"
                placeholder="כמות שורות"
                type={"number"}
                onChange={(e) => {
                  setTickAmount(parseInt(e.target.value));
                }}
                value={ticksAmount}
              />
            </div>
          </div>
        </div>
        {currentStrat && (
          <div className="mb-8 flex w-full justify-center gap-24">
            <div className="flex flex-col">
              <p className="P1">
                <span className="S1">{currentStrat.bank}</span>
                <span className="S1">בנק</span>
              </p>
              <p className="P1">
                <span className="S1"> {currentStrat.baseTimeGap}</span>
                <span className="S1"></span>מרווח זמן
              </p>
              <p className="P1">
                <span className="S1">{currentStrat.current_opend}</span>
                <span className="S1">פוזיציות</span>
              </p>
            </div>
            <div className="flex flex-col">
              <p className="P1">
                <span className="">{"SSS"}</span>
                <span className="S1">אסטרטגיה</span>
              </p>
              <p className="P1">
                <span className="S1"> {currentStrat.shortEmaRatio}</span>

                <span className="S1"> ממוצע קצר</span>
              </p>
              <p className="P1">
                <span className="S1">{currentStrat.longEmaRatio}</span>
                <span className="S1">ממוצע ארוך</span>
              </p>
            </div>
            <div className="flex flex-col"></div>
          </div>
        )}
        {basePlot.length && (
          <LineChart_
            data={basePlot.slice(
              basePlot.length - ticksAmount <= 0
                ? 0
                : basePlot.length - ticksAmount,
              basePlot.length - 1
            )}
            timeGap={timeGap}
            strat={currentStrat}
          />
        )}
        {/* <div>{JSON.stringify(Actions.data?.data[0])}</div> */}
        {Actions.data?.data && (
          <div>
            <div className="flex gap-2">
              {headers.map((header: string) => (
                <p className="w-20">{header}</p>
              ))}
            </div>
            {Actions.data.data.map((A: any) => {
              return (
                <div className="flex gap-2">
                  {Object.values(A).map((v: any, i) => {
                    if (i <= headers.length - 1)
                      return (
                        <p className="w-20">
                          {headers[i] == "מזהה מ"
                            ? v.slice(0, 6)
                            : typeof v == "number"
                            ? v.toFixed(4)
                            : dateHeaders.find((h) => h == headers[i])
                            ? reformat.format(new Date(v))
                            : JSON.stringify(v)}
                        </p>
                      );
                  })}
                </div>
              );
            })}
            {UsersData.data && <div>{JSON.stringify(currentStrat)}</div>}
            {/* 
            // {UsersData.data && (
            //   <div>{JSON.stringify(typeof UsersData.data)}</div>
            // )}
            // {UsersData.data && <div>{JSON.stringify(UsersData.data)}</div>}
            // {Movments.data?.data && (
            //   <div>{JSON.stringify(Movments.data?.data)}</div>
            // )} */}
          </div>
        )}
      </main>
    </>
  );
}

export default DashBoard;
